slug: service-mesh-with-consul
id: bok4pw0xdfdr
type: track
title: Service Mesh with Consul
teaser: Evolve from service discovery to service mesh. No more mapping IP addresses
  and ports across load balancers and firewalls. Consul Connect ensures secure connections
  between services wherever they run.
description: |-
  This track will build on what you learned in the service discovery track and take our application from service discovery to service mesh.
  We'll dive into mesh fundamentals and use an Envoy proxy to connect our application to its database.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags: []
owner: hashicorp
developers:
- lance@hashicorp.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: 01-sidecar-services
  id: 4zvgi4rkfawl
  type: challenge
  title: "Get Into My Sidecar \U0001F697"
  teaser: Create a sidecar service definition for your application proxy
  notes:
  - type: text
    contents: |-
      Connect proxies are typically deployed as _sidecars_ to an instance
      that they handle traffic for. They might be on the same bare metal server, virtual
      machine, or Kubernetes daemonset. Connect has a pluggable proxy architecture,
      with awesome first-class support for Envoy. We'll use Envoy as our proxy for
      the entirety of this workshop. <br>

      Visit the [Connect docs](https://www.consul.io/docs/connect/proxies.html) for more info on proxy integration. <br>

      In this challenge, we'll set up a sidecar definition.
  - type: image
    url: https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/docs/slides/multi-cloud/consul-oss/images/connect_sidecar.png
  assignment: |-
    In this challenge we'll add a sidecar service to our existing service definition. <br>

    The `sidecar_service` field is a nested service definition where almost any regular service definition field can be set. <br>

    All fields in the nested definition are optional, however there are some default settings
    that make sidecar proxy configuration much simpler. <br>

    In orchestrated environments,such as `Kubernetes` or `Nomad`, this is highly abstract and can be configured
    with simple metadata i.e. annotations. <br>

    Update the definition by adding the the `connect` block as seen below.
    Copy and paste what's below over the entire file in the *Database Service* tab.
    Use CTRL-S to save the file. <br>

    ```
    {
      "service": {
        "name": "mysql",
        "tags": [
          "database",
          "production"
        ],
        "port": 3306,
        "connect": { "sidecar_service": {} },
        "check": {
          "id": "mysql",
          "name": "MySQL TCP on port 3306",
          "tcp": "localhost:3306",
          "interval": "10s",
          "timeout": "1s"
        }
      }
    }
    ```

    Next, reload Consul: <br>

    ```
    consul reload
    ```

    You should see a failing service called `mysql-sidecar-proxy` in Consul.
    This is expected! <br>

    We will start a proxy and register it with Connect in our next challenge.
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Database
    type: terminal
    hostname: database
  - title: Database Service
    type: code
    hostname: database
    path: /etc/consul.d/database_service.json
  difficulty: basic
  timelimit: 900
- slug: 02-sidecar-proxies
  id: l8hfdudhif7b
  type: challenge
  title: "Introducing the Envoy Proxy \U0001F5A7"
  teaser: Run your first Connect sidecar proxy with Envoy
  notes:
  - type: text
    contents: |-
      In the last challenge we set up a sidecar service definition for our
      Envoy proxy. This is the first step in bringing our mesh to life. <br>

      The sidecar definition tells Consul to expect a proxy registration for a service, Database, in this example. <br>

      Now that Consul is aware that the Database service should run a proxy,
      we can use the Consul agent to bootstrap the proxy and send it dynamic configuration. <br>

      We'll take a deeper look at this configuration later.
  assignment: |-
    Now that we've registered a proxy service in Consul for our MySQL database,
    let's start the proxy server so the health check will pass. <br>

    Consul will bootstrap the proxy with the correct configuration, and bring it into the mesh for us. <br>

    We've placed an Envoy binary on this machine for you.
    Consul will be able to access it from the `$PATH.` <br>

    Go ahead and start the proxy with the following command: <br>

    ```
    nohup consul connect envoy -sidecar-for mysql > /envoy.out &
    ```

    You can verify in the Consul UI or the with the Consul CLI that your proxy health check is now passing. <br>

    We can now use the proxy to establish communication between our application and the database!
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Database
    type: terminal
    hostname: database
  - title: Database Service
    type: code
    hostname: database
    path: /etc/consul.d/database_service.json
  difficulty: basic
  timelimit: 900
- slug: 03-sidecar-upstreams
  id: 7vynj1nfnnan
  type: challenge
  title: "Connect Upstream with Envoy \U0001F517"
  teaser: Add an upstream definition for our Envoy app proxy
  notes:
  - type: text
    contents: |-
      Connect provides service connectivity through upstream definitions.
      These services could be a database, backend, or any service which another service relies on. <br>

      In the previous challenges we set up a sidecar service definition without an upstream definition.  <br>

      In this assignment we'll modify our sidecar service and add an upstream definition that will allow our application to connect to its database.
  assignment: |-
    We've brought back our application server for this assignment. <br>

    It has an empty sidecar_service definition, which you can see in the code editor.
    Let's modify it below to create connectivity to our database. <br>

    Modify the application's `sidecar_service` definition to add our upstream for the database.
    You can copy and paste the entire file from below: <br>

    ```
    {
      "service": {
        "name": "wordpress",
        "tags": [
          "wordpress",
          "production"
        ],
        "port": 80,
        "connect": {
          "sidecar_service": {
            "proxy": {
              "upstreams": [
                {
                  "destination_name": "mysql",
                  "local_bind_port": 3306
                }
              ]
            }
          }
        },
        "check": {
          "id": "wordpress",
          "name": "wordpress TCP on port 80",
          "tcp": "localhost:80",
          "interval": "10s",
          "timeout": "1s"
        }
      }
    }
    ```

    Next, reload Consul.

    ```
    consul reload
    ```

    Envoy will create a loopback listener for us to connect to the database on port `3306`. <br>

    Envoy has an admin interface that listens on port `19000` by default.
    We can check out our new listener with following command: <br>

    ```
    curl localhost:19000/listeners
    ```

    We'll configure our application to use the listener in our next assignment.
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: App
    type: terminal
    hostname: app
  - title: App Service
    type: code
    hostname: app
    path: /etc/consul.d/application_service.json
  difficulty: basic
  timelimit: 900
- slug: 04-enable-localhost-proxy
  id: tymg5yhlxjgb
  type: challenge
  title: "Enter the Meshtrix \U0001F469\U0001F3FB‚Äç\U0001F4BB"
  teaser: Use Consul and Envoy to connect our application to a backend database
  notes:
  - type: text
    contents: In this section will use Envoy to connect the application to the database.
  assignment: |-
    In the last assignment we created an Envoy listener for our database
    service through a Connect upstream definition. <br>

    Let's use that definition to allow our application to connect to the database. <br>

    On line 32 of the `App Config` tab, recall our listener is configured on localhost, so we can just update our address to `127.0.0.1`, and establish connectivity. <br>

    Go ahead and do this now. Check the `Website` tab.
    Our service mesh blog is back online!
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: App
    type: terminal
    hostname: app
  - title: App Config
    type: code
    hostname: app
    path: /var/www/html/wp-config.php
  - title: Website
    type: service
    hostname: app
    port: 80
  difficulty: basic
  timelimit: 900
- slug: 05-open-and-close-the-gates
  id: d3mqrfaegmle
  type: challenge
  title: "Open and Close the Gates \U0001F511\U0001F6AA"
  teaser: Use Consul intentions to allow or deny proxy traffic based on application
    service identity.
  notes:
  - type: text
    contents: Intentions define access control for services via Consul Connect and
      are used to control which services may establish connections. You can manage
      Intentions via the API, CLI, or UI. Intentions are enforced by the proxy on
      inbound connections.
  - type: text
    contents: |-
      After verifying the TLS client certificate,
      the authorize API endpoint is called which verifies the connection.
      If authorize returns false the connection must be terminated. <br>

      Intentions are powerful because they free you from having to manage endless lists of IP address and port mappings.
      Instead, we can manage traffic in simple terms by what an application is or does. <br>

      Let's use intentions to restrict connectivity from our application to the database.
  assignment: |-
    Traffic is denied by default at the start of this assignment, so our application is now broken. <br>
    Let's create an allow rule to bring back our application.
    Copy the following command into the *app* tab. <br>

    ```
    consul intention create -allow wordpress mysql
    ```

    You can also manage Intentions in the `Intentions` tab of the Consul UI.
    Click on the intention, and change it to `deny`.  What happens? <br>

    Change it back to `allow` to restore service.
    With connectivity from the database restored, your application should be serving traffic once again!!! <br>

    We'll dive deeper into how this works in the next challenge.
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: app
    type: terminal
    hostname: app
  - title: Website
    type: service
    hostname: app
    port: 80
  difficulty: basic
  timelimit: 900
- slug: 06-sidecar-envoy
  id: ntf48xx67xaz
  type: challenge
  title: Pop Open the Hood ‚öôÔ∏è
  teaser: Peek inside and learn some Envoy & Consul magic
  notes:
  - type: text
    contents: |-
      In this assignment, we'll take a deeper look at Envoy. We'll focus on three elements that make up the foundation of our mesh. <br>

      * mTLS - How did Connect and Envoy provide end-to-end encryption between services?
      * Service Discovery - How was Consul able to get service discovery information to the Envoy proxy for it's upstreams?
      * Intentions - How were we able to allow or deny traffic based on service identity?

      Let's investigate each of these with some easy to get info from Envoy.
  assignment: |-
    First, let's check out some of the certificate information from our Envoy proxy.
    You can see some basic cert info in the Envoy UI under `certs`.
    We've also grabbed the cert for you and decoded in the code editor. <br>

    We can look some basic certificate information from Envoy with the below command.
    ```
    curl -s localhost:19000/certs | jq '.certificates[0].cert_chain[0].subject_alt_names[0].uri'
    ```
    Nice! That's the identity for our application in the mesh. We can see the TTL for the certificate

    Let's see when that  cert expires.
    ```
    curl -s localhost:19000/certs | jq '.certificates[0].cert_chain[0].days_until_expiration'
    ```
    Our certificate TTL is very short, 2 days! And as a bonus, it's automatically managed by Consul. <br>

    Second, let's check out some of the service discovery information from our Envoy proxy. You can see the this in the Envoy UI under `clusters`.

    ```
    curl -s localhost:19000/clusters | grep  mysql
    ```

    We can see the `added_via_api::true` is set for our `database` cluster, which means the Consul agent sent this to Envoy via the API.
    We can also validate that the ip address in Envoy matches the ip address in Consul for the database node.

    ```
    curl -s  http://127.0.0.1:8500/v1/catalog/node/Database | jq '.Node.Address'
    ```

    Last, we can do some basic intention validation by emulating the API call made from Envoy to  the Consul agent.

    ```
    curl -s -X POST -d @/tmp/payload.json http://127.0.0.1:8500/v1/agent/connect/authorize |  jq
    ```

    That's it!!! Now you're an expert at troubleshooting Connect & Envoy!!!
  tabs:
  - title: App - Envoy
    type: service
    hostname: app
    port: 19000
  - title: App - Cert
    type: code
    hostname: app
    path: /tmp/crt.txt
  - title: App - Authorize
    type: code
    hostname: app
    path: /tmp/payload.json
  - title: App
    type: terminal
    hostname: app
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Website
    type: service
    hostname: app
    port: 80
  difficulty: basic
  timelimit: 900
checksum: "18197989603880188723"
