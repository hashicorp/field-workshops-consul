#!/bin/sh

#Fix path
echo "Fixing our path..."
export PATH=/sbin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin

#Fix permission issues on / /var /dev - Bug https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1948904
chown root / /var /dev

#Utils
apt-get update -y && apt-get install -y curl unzip wget dnsutils netcat jq xz-utils lsb-release software-properties-common gnupg2

# ENVOY - ALTERNATIVE INSTALLATION METHOD
ENVOY_VERSION="1.18.3"
wget https://archive.tetratelabs.io/envoy/download/v${ENVOY_VERSION}/envoy-v${ENVOY_VERSION}-linux-amd64.tar.xz
tar -xf envoy-v${ENVOY_VERSION}-linux-amd64.tar.xz
chmod +x envoy-v${ENVOY_VERSION}-linux-amd64/bin/envoy
mv envoy-v${ENVOY_VERSION}-linux-amd64/bin/envoy /usr/bin/envoy
rm -rf envoy-v${ENVOY_VERSION}-linux-amd64.tar.xz envoy-v${ENVOY_VERSION}-linux-amd64
envoy --version

#consul
rm -f /usr/local/bin/consul
curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
apt-get update -y && apt-get install -y consul=1.10.0
rm -f /etc/consul.d/consul.hcl

cat <<-EOF > /etc/consul.d/client.json
{
  "datacenter": "dc1",
  "bind_addr": "0.0.0.0",
  "client_addr": "0.0.0.0",
  "data_dir": "/consul/data",
  "node_name": "Application",
  "connect": {
    "enabled": true
  },
  "ports": {
    "grpc": 8502
  },
  "retry_join": [
    "consul-server-0:8301",
    "consul-server-1:8301",
    "consul-server-2:8301"
  ]
}
EOF

cat <<-EOF > /etc/consul.d/application_service.json
{
  "service": {
    "name": "wordpress",
    "tags": [
      "wordpress",
      "production"
    ],
    "port": 80,
    "connect": {"sidecar_service": {} },
    "check": {
      "id": "wordpress",
      "name": "wordpress TCP on port 80",
      "tcp": "localhost:80",
      "interval": "10s",
      "timeout": "1s"
    }
  }
}
EOF

echo "Killing the currently running Consul agent..."
pkill consul

echo "Creating Consul startup script..."
cat <<-EOF > /bin/start_consul.sh
#!/bin/sh
echo "Starting HashiCorp Consul in client Mode..."
sleep 1
echo "CMD: nohup consul agent -config-dir=/etc/consul.d > /consul.out &"
nohup /usr/bin/consul agent -config-dir=/etc/consul.d > /consul.out &
echo "Log output will appear in consul.out..."
sleep 1
echo "Consul client startup complete."
EOF
chmod +x /bin/start_consul.sh

#start consul
/bin/start_consul.sh

#start envoy
nohup consul connect envoy -sidecar-for wordpress -admin-bind=0.0.0.0:19000 > /envoy.out &

#hack this
consul reload

echo "Installing the WP-CLI tool..."
wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O /usr/local/bin/wp
chmod +x /usr/local/bin/wp

echo "Setting up Wordpress connection..."
sleep 10 # wait for DB server to be up
rm -rf /var/www/html/*
/usr/local/bin/wp core download --version=5.6.2 --allow-root --path=/var/www/html
cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
perl -p -i -e "s/'localhost'/'Database'/" /var/www/html/wp-config.php
perl -p -i -e "s/'username_here'/'root'/" /var/www/html/wp-config.php
perl -p -i -e "s/'password_here'/'HashiCorp123'/" /var/www/html/wp-config.php
perl -p -i -e "s/'database_name_here'/'wordpress'/" /var/www/html/wp-config.php

echo "Configuring user and theme..."
URL="https://app-80-${INSTRUQT_PARTICIPANT_ID}.env.play.instruqt.com"
/usr/local/bin/wp core install --url="$URL" --title="Consul Service Mesh" --admin_user=consul --admin_password=consul --admin_email=consul@example.com --skip-email --allow-root --path=/var/www/html
/usr/local/bin/wp theme activate twentyseventeen --allow-root --path=/var/www/html
/usr/local/bin/wp option update blogdescription "Dynamically secure any service or app on your network" --allow-root --path=/var/www/html
/usr/local/bin/wp post create --post_title='Consul Enterprise Features' --post_content='<ul><li><a href="https://consul.io/docs/enterprise/backups/index.html">Automated Backups</a></li><li><a href="https://consul.io/docs/enterprise/upgrades/index.html">Automated Upgrades</a></li><li><a href="https://consul.io/docs/enterprise/read-scale/index.html">Enhanced Read Scalability</a></li><li><a href="https://consul.io/docs/enterprise/redundancy/index.html">Redundancy Zones</a></li><li><a href="https://consul.io/docs/enterprise/federation/index.html">Advanced Federation for Complex NetworkTopologies</a></li><li><a href="https://consul.io/docs/enterprise/network-segments/index.html">Network Segments</a></li><li><a href="https://consul.io/docs/enterprise/sentinel/index.html">Sentinel</a></li></ul><p>These features are part of <a href="https://www.hashicorp.com/consul.html">Consul Enterprise</a>.</p>' --allow-root --path=/var/www/html --post_status=publish
/usr/local/bin/wp post create --post_title='Service Mesh Made Easy' --post_content='<img class="alignleft size-medium" src="https://www.consul.io/assets/images/og-image-6ef0ad8b.png" width="192" height="192" />One of the major use cases for Consul is Service Mesh. Consul provides a DNS interface that downstream services can use to find the IP addresses of their upstream dependencies.<p>Consul knows where these services are located because each service registers with its local Consul client. Operators can register services manually, configuration management tools can register services when they are deployed, or container orchestration platforms can register services automatically via integrations.' --allow-root --path=/var/www/html --post_status=publish
/usr/local/bin/wp comment create --comment_post_ID=5 --comment_content="Wow, best Service Mesh tool ever. üê±‚Äçüë§" --comment_author="A. Turing" --allow-root --path=/var/www/html
/usr/local/bin/wp comment create --comment_post_ID=5 --comment_content="ü§òüë©‚Äçüé§ Consul Rocks! We use it in all our datacenters and cloud environments and can find all our healthy services instantly." --comment_author="A. Lovelace" --allow-root --path=/var/www/html
/usr/local/bin/wp comment create --comment_post_ID=5 --comment_content="„Åì„Çå„ÅØ„ÄÅ„Çπ„Ç§„ÉÉ„ÉÅ„É≥„Ç∞ÂõûË∑Ø„ÅÆÁêÜË´ñ„Å´ÊúÄÈÅ©„Åß„Åô„ÄÇüï∏Ô∏è" --comment_author="‰∏≠Â≥∂" --allow-root --path=/var/www/html

cat <<-'EOF' >> /var/www/html/wp-config.php

// If we're behind a proxy server and using HTTPS, we need to alert WordPress of that fact
// see also http://codex.wordpress.org/Administration_Over_SSL#Using_a_Reverse_Proxy
define('FORCE_SSL_ADMIN', true);
// in some setups HTTP_X_FORWARDED_PROTO might contain
// a comma-separated list e.g. http,https
// so check for https existence
if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false)
$_SERVER['HTTPS']='on';
EOF

echo "Breaking the Wordpress connection..."
perl -p -i -e "s/'Database'/'10.94.99.99'/" /var/www/html/wp-config.php

echo "Making a backup of the Wordpress config file..."
cp /var/www/html/wp-config.php /tmp/wp-config.php.backup

exit 0
