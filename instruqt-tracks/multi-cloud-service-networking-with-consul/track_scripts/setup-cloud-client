#!/bin/bash
set -euvxo pipefail

# Note: override these when testing from a different repo and/or branch
#       The `-b` option to `git clone` is useful for pulling from the
#       non-default branch

ASSET_REPO="https://github.com/hashicorp/field-workshops-consul.git"
ASSET_REPO_FETCH_OPTIONS=""

AWS_DEFAULT_REGION="us-east-1"
# END OPTIONS

while [ ! -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    echo "Waiting for Instruqt to finish booting the virtual machine"
    sleep 1
done

echo "##### INSTRUQT PARTICIPANT ID ${INSTRUQT_PARTICIPANT_ID}"

#make vault run in instruqt container
setcap cap_ipc_lock= /usr/bin/vault

# Override licenses from those in Instruqt Secrets
# This trick with awk keeps the contents of the secret
# environment variables from being logged
echo "Writing license files from instruqt secrets"
awk 'BEGIN {print ENVIRON["HC_CONSUL_LICENSE"]}' > /etc/consul.hclic < /dev/null
awk 'BEGIN {print ENVIRON["HC_VAULT_LICENSE"]}' > /etc/vault.hclic < /dev/null

#check licenses
echo "checking licenses..."
vault license inspect /etc/vault.hclic
if [ $? -ne 0 ]
then
  fail-message "Vault license is not valid."
  exit 1
fi
consul license inspect /etc/consul.hclic
if [ $? -ne 0 ]
then
  fail-message "Consul license is not valid."
  exit 1
fi

#get assets
echo "cloning assets..."
echo "git clone ${ASSET_REPO_FETCH_OPTIONS} ${ASSET_REPO}"
git clone ${ASSET_REPO_FETCH_OPTIONS} ${ASSET_REPO}
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/terraform .
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/packer .
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/apps .
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/policies .
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/helm .
cp -r field-workshops-consul/instruqt-tracks/multi-cloud-service-networking-with-consul/assets/scripts .
rm -rf field-workshops-consul

# IL-378
# This looks weird Because Quoting(TM)
echo 'for kubevar in $(env | awk -F=  '"'"'/^KUBERNETES_/ { print $1;};'"'"'); do unset $kubevar; done' >> /root/.bashrc

# IL-522 - Fix GKE auth in Multi-Cloud Workshop
echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> /root/.bashrc
apt update -y
apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
apt-get --only-upgrade -y install google-cloud-sdk kubectl
# END IL-522

# Ensure we load /etc/profile.d/instruqt-env.sh
echo "source /etc/profile.d/instruqt-env.sh" >> /root/.bashrc
set +v
source /root/.bashrc
set -euvo pipefail

# Azure account setup
az account clear
echo "Logging in with Azure SPN..."
n=0
until [ $n -ge 5 ]; do
  az login \
  --username "${INSTRUQT_AZURE_SUBSCRIPTION_CONSUL_USERNAME}" \
  --password "${INSTRUQT_AZURE_SUBSCRIPTION_CONSUL_PASSWORD}" && break
  n=$[$n+1]
  sleep 60
done
if [ $n -ge 5 ]; then
  exit 1
fi

#aws setup
aws configure set default.region ${AWS_DEFAULT_REGION}
# IL-802 we may get AWS accounts with default VPCs already in there, so
# check before we do this
aws ec2 describe-vpcs
if [ "$(aws ec2 describe-vpcs --region ${AWS_DEFAULT_REGION} | jq '[.Vpcs[]|select (.IsDefault == true)]|length')" != "1" ]; then
    echo "Creating default vpc"
    aws ec2 create-default-vpc
else
    echo "Default vpc already exists in AWS ${AWS_DEFAULT_REGION}"
fi

#azure packer setup
echo "azure packer setup"
n=0
until [ $n -ge 5 ]; do
    az group create -l westus3 -n packer
    if [ $? -ne 0 ]; then
	n=$[$n+1]
	sleep 60
    else
	break
    fi
done
if [ $n -ge 5 ]; then
    fail-message "azure packer setup failed"
    exit 1
fi


#cloud client packages - already on machine now with packer
#apt update -y
#apt install software-properties-common -y
#curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
#apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#apt update -y
#apt install terraform=0.13.5 packer=1.7.0 consul-enterprise=1.10.0+ent vault-enterprise=1.7.1+ent nomad-enterprise=1.0.4+ent libcap-dev jq redis-server -y

#jwt validation - already on machine now with packer
#apt install npm -y
#npm install -g jwt-cli

#tf creds
echo 'export GOOGLE_CREDENTIALS=$(echo $INSTRUQT_GCP_PROJECT_CONSUL_SERVICE_ACCOUNT_KEY | base64 -d)' >> /root/.bashrc

#fix path
echo "export PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> ~/.bashrc

#ssh
cat << EOF > ~/.ssh/config
Host *
    StrictHostKeyChecking no
EOF

#optimistic provisioning

#packer
echo "Provisoning Packer Builds..."
cd /root/packer
nohup packer build hashistack.json 2>&1 | tee nohup.out &

#infra
echo "Provisoning Infra..."
cd /root/terraform/infra
terraform init
pubkey=$(cat ~/.ssh/id_rsa.pub)
cat << EOF > /root/terraform/infra/terraform.tfvars
gcp_project_id="$(echo $INSTRUQT_GCP_PROJECT_CONSUL_PROJECT_ID)"
ssh_public_key="${pubkey}"
EOF
export GOOGLE_CREDENTIALS=$(echo $INSTRUQT_GCP_PROJECT_CONSUL_SERVICE_ACCOUNT_KEY | base64 -d)
terraform apply -auto-approve 2>&1 | tee nohup.out

#iam
echo "Provisoning IAM..."
cd /root/terraform/iam
terraform init
cat << EOF > /root/terraform/iam/terraform.tfvars
gcp_project_id="$(echo $INSTRUQT_GCP_PROJECT_CONSUL_PROJECT_ID)"
EOF
terraform apply -auto-approve 2>&1 | tee nohup.out

#gcp GKE secondary
echo "Provisoning GKE K8s Consul Cluster..."
cd /root/terraform/gcp-consul-secondary
terraform init
cat << EOF > /root/terraform/gcp-consul-secondary/terraform.tfvars
gcp_project_id="$(echo $INSTRUQT_GCP_PROJECT_CONSUL_PROJECT_ID)"
EOF
export GOOGLE_CREDENTIALS=$(echo $INSTRUQT_GCP_PROJECT_CONSUL_SERVICE_ACCOUNT_KEY | base64 -d)
nohup terraform apply -auto-approve 2>&1 | tee nohup.out &

#gcp GKE app clusters
echo "Provisoning GKE K8s App Clusters..."
cd /root/terraform/k8s-scheduler-services
terraform init
cat << EOF > /root/terraform/k8s-scheduler-services/terraform.tfvars
gcp_project_id="$(echo $INSTRUQT_GCP_PROJECT_CONSUL_PROJECT_ID)"
EOF
export GOOGLE_CREDENTIALS=$(echo $INSTRUQT_GCP_PROJECT_CONSUL_SERVICE_ACCOUNT_KEY | base64 -d)
nohup terraform apply -auto-approve 2>&1 | tee nohup.out &

#aws elasticache
echo "Provisoning AWS ElastiCache..."
cd /root/terraform/cache-services
terraform init
AWS_CONSUL_IP=$(terraform output -state /root/terraform/aws-consul-primary/terraform.tfstate aws_consul_public_ip)
cat << EOF > /root/terraform/cache-services/terraform.tfvars
consul_http_addr="http://127.0.0.1:8500"
EOF
nohup terraform apply -target=aws_elasticache_cluster.redis -auto-approve 2>&1 | tee nohup.out &

#azure postgreSQL
echo "Provisoning Azure PostgreSQL..."
cd /root/terraform/database-services
terraform init
AZURE_CONSUL_IP=$(terraform output -state /root/terraform/azure-consul-secondary/terraform.tfstate azure_consul_public_ip)
cat << EOF > /root/terraform/database-services/terraform.tfvars
consul_http_addr="http://127.0.0.1:8500"
EOF
nohup terraform apply -target=azurerm_postgresql_flexible_server.postgres -auto-approve 2>&1 | tee nohup.out &

#wait for packer images

#aws
echo "Checking AWS Images"
n=0
until [ $n -ge 10 ]; do
  echo "Fetching AWS AMI..."
  aws_ami=$(aws ec2 describe-images --owners self | jq -r .Images[0].Description)
  if [ "${aws_ami}" = "Hashistack - Ubuntu" ]; then
    break
  fi
  n=$[$n+1]
  sleep 60
done
if [ $n -ge 10 ]; then
  fail-message "Could not get AWS AMI."
  exit 1
fi

#azure
echo "Checking Azure Images"
n=0
until [ $n -ge 5 ]; do
  echo "Fetching Azure Image..."
  azure_vm=$(az image list -g packer | jq -r .[0].tags.name)
  if [ $? -eq 0 ]; then
      if [ "${azure_vm}" = "Hashistack" ]; then
	break
      fi
  fi
  n=$[$n+1]
  sleep 60
done
if [ $n -ge 5 ]; then
  fail-message "Could not get Azure Image."
  exit 1
fi

#vault
echo "Provisoning Vault..."
cd /root/terraform/vault
terraform init
pubkey=$(cat ~/.ssh/id_rsa.pub)
cat << EOF > /root/terraform/vault/terraform.tfvars
ssh_public_key="${pubkey}"
EOF
terraform apply -auto-approve 2>&1 | tee terraform.out

#run pre-flight checks
echo "Running pre-flight checks..."

#infra

#aws vpc
echo "Checking AWS VPCs"
aws ec2 describe-vpcs

n=0
until [ $n -ge 5 ]; do
    aws_vpc_count=$(aws ec2 describe-vpcs | jq '[.. |."State"? | select(. == "available")] | length')
    echo "aws_vpc_count is ${aws_vpc_count}"
    # 3 = 2 created + 1 default
    if [ "${aws_vpc_count}" != "3" ]; then
	fail-message "Not enough aws VPCs"
	sleep 60
	n=$[$n+1]
	continue
    fi
    break
done
if [ $n -ge 5 ]; then
    fail-message "AWS VPC check failed"
    exit 1
fi

#azure vpc
echo "Verifying Azure VNETs"
n=0
until [ $n -ge 5 ]; do
    rg=$(terraform output -state /root/terraform/infra/terraform.tfstate azure_rg_name)
    vnet_count=$(az network vnet list -g "${rg}" | jq '. | length')
    if [ -z "$vnet_count" ]; then
	fail-message "Could not get Azure VNets. Check your Terraform."
	sleep 60
	n=$[$n+1]
	continue
    fi
    if [ "$vnet_count" != "2" ]; then
      fail-message "Azure VNETs did not provision successful."
      sleep 60
      n=$[$n+1]
      continue
    fi
    break
done
if [ $n -ge 5 ]; then
    fail-message "Azure VNET check failed"
    exit 1
fi

#gcp vpc
echo "Verifying GCP VPCs"
gcp_vpc=$(gcloud compute networks list --format=json | jq '. | length')
if [ "${gcp_vpc}" != "3" ]; then
  fail-message "GCP VPCs did not provision successful."
  exit 1
fi

#iam
#check aws roles
aws iam get-role --role-name consul-$(terraform output -state /root/terraform/infra/terraform.tfstate env)
if [ $? -ne 0 ]
then
  fail-message "Error getting AWS Consul IAM role"
  exit 1
fi
aws iam get-role --role-name nomad-$(terraform output -state /root/terraform/infra/terraform.tfstate env)
if [ $? -ne 0 ]
then
  fail-message "Error getting AWS Nomad IAM role"
  exit 1
fi

#check azure roles
n=0
until [ $n -ge 5 ]; do
    rg=$(terraform output -state /root/terraform/infra/terraform.tfstate azure_rg_name)
    az identity show \
      --name consul-$(terraform output -state /root/terraform/infra/terraform.tfstate env) \
      --resource-group "${rg}"
    if [ $? -ne 0 ]
    then
      fail-message "Error getting Azure Consul IAM role"
      n=$[$n+1]
      sleep 60
      continue
    fi
    rg=$(terraform output -state /root/terraform/infra/terraform.tfstate azure_rg_name)
    az identity show \
      --name product-api-$(terraform output -state /root/terraform/infra/terraform.tfstate env) \
      --resource-group "${rg}"
    if [ $? -ne 0 ]
    then
      fail-message "Error getting Azure Consul IAM role"
      n=$[$n+1]
      sleep 60
      continue
    fi
    break
done
if [ $n -ge 5 ]; then
    fail-message "Azure role check failed"
    exit 1
fi

#check gcp roles
gcloud iam service-accounts describe $(terraform output -state /root/terraform/iam/terraform.tfstate gcp_consul_service_account_email)
if [ $? -ne 0 ]
then
  fail-message "Could not check Consul GCP role."
  exit 1
fi

#vault
#aws
n=0
until [ $n -ge 5 ]; do
    vault_lb=$(terraform output -state /root/terraform/vault/terraform.tfstate aws_vault_ip)
    echo "AWS Vault Load balancer is: ${vault_lb}"
    if [ -z "${vault_lb}" ]; then
      fail-message "AWS Vault is not provisioned yet"
      n=$[$n+1]
      sleep 60
      continue
    fi
    vault_api=$(curl -s -o /dev/null -w "%{http_code}" http://${vault_lb}:8200/v1/sys/health)
    ec=$?
    if [ $ec -ne 0 ]; then
      fail-message "Checking AWS Vault LB failed with $ec"
      n=$[$n+1]
      sleep 60
      continue
    fi

    if [ "${vault_api}" != "501" ]; then
      fail-message "AWS Vault service did not return a 501. Please wait a few moments and try again."
      n=$[$n+1]
      sleep 60
      continue
    fi
    break
done
if [ $n -ge 5 ]; then
    fail-message "AWS Vault check failed"
    exit 1
fi

#azure
n=0
until [ $n -ge 5 ]; do
    vault_lb=$(terraform output -state /root/terraform/vault/terraform.tfstate azure_vault_ip)
    echo "Azure Vault Load balancer is: ${vault_lb}"
    if [ -z "${vault_lb}" ]; then
      fail-message "Azure Vault is not provisioned yet"
      n=$[$n+1]
      sleep 60
      continue
    fi
    vault_api=$(curl -s -o /dev/null -w "%{http_code}" http://${vault_lb}:8200/v1/sys/health)
    ec=$?
    if [ $ec -ne 0 ]; then
      fail-message "Checking Azure Vault LB failed with $ec"
      n=$[$n+1]
      sleep 60
      continue
    fi

    if [ "${vault_api}" != "501" ]; then
      fail-message "Azure Vault service did not return a 501. Please wait a few moments and try again."
      n=$[$n+1]
      sleep 60
      continue
    fi
    break
done
if [ $n -ge 5 ]; then
    fail-message "Azure vault check failed"
    exit 1
fi

exit 0
