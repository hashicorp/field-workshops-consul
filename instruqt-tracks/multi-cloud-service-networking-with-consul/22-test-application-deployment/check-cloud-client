#!/bin/sh

#Frontend Nginx TProxy Endpoint
kubectl config use-context react
endpoint=$(kubectl get svc nginx-ingress-controller -o json | jq -r .status.loadBalancer.ingress[0].ip)

#nginx
n=0
until [ $n -ge 3 ]; do
  curl -s --output /dev/null --silent -fail http://${endpoint} && break
  n=$[$n+1]
  sleep 5
done
if [ $n -ge 3 ]; then
  fail-message "Frontend Nginx service did not return a 200"
  exit 1
fi

#Consul Ingress API Endpoint
kubectl config use-context graphql
endpoint=$(kubectl get svc consul-graphql-graphql-ingress-gateway -o json | jq -r .status.loadBalancer.ingress[0].ip)

#product
n=0
until [ $n -ge 3 ]; do
  curl -s --output /dev/null --silent -fail http://${endpoint}:8080/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"{\n  coffees{id,name,price}\n}"}' \
    --compressed && break
  n=$[$n+1]
  sleep 5
done
if [ $n -ge 3 ]; then
  fail-message "Product API service did not return a 200"
  exit 1
fi

#payment
n=0
until [ $n -ge 3 ]; do
  curl -s --output /dev/null --silent -fail http://${endpoint}:8080/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"mutation{ pay(details:{ name: \"nic\", type: \"mastercard\", number: \"1234123-0123123\", expiry:\"10/02\", cv2: 1231, amount: 12.23 }){id, card_plaintext, card_ciphertext, message } }"}' \
    --compressed && break
  n=$[$n+1]
  sleep 5
done
if [ $n -ge 3 ]; then
  fail-message "Payment API service did not return a 200"
  exit 1
fi

exit 0
