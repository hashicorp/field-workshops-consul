slug: consul-basics
id: flhasumrfmgq
type: track
title: Consul Basics
teaser: Apprenez également à utiliser la découverte de services la plus populaire au monde.
description: |-
Ceci est un cours accéléré sur les opérations du consul. Vous accomplirez ce qui suit :

   * Configurer un cluster Consul à 3 nœuds
   * Utilisez l'interface utilisateur Consul
   * Utilisez la CLI Consul
   * Utilisez l'API Consul
   * Ajouter un nœud d'application à votre cluster
   * Testez la haute disponibilité de Consul
   * Ajouter une sécurité de base avec les ACL de consul

Une fois que vous avez appris ces principes fondamentaux, vous pouvez passer à des sujets intermédiaires et avancés tels que Service Discovery et Consul Connect.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags:
- introduction to consul
- consul basics
- serf
- cluster
owner: hashicorp
developers:
- lance@hashicorp.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: 01-meet-consul
  id: bgfx8nbzqnjv
  type: challenge
  title: Get to Know Consul
  teaser: My First Consul cluster
  notes:
  - type: text
    contents: "\U0001F578️Vous êtes sur le point d'entrer dans la Zone Consul\U0001F47D"
  assignment: |
 Bienvenue sur les bases du consul ! Dans cet atelier, vous allez démarrer un cluster Consul à trois nœuds.

     Une fois que les trois nœuds ont rejoint le cluster de serveurs, vous devriez voir l'interface utilisateur Consul devenir saine.

     Démarrez le processus du serveur Consul sur chaque nœud de cluster avec la commande suivante.
    ```
    /bin/start_consul.sh
    ```

Vous pouvez simplement le copier et le coller dans le terminal pour chaque serveur. Vous pouvez également afficher la configuration de l'un des serveurs Consul dans l'éditeur de code. Vous n'avez pas besoin de comprendre toutes les options, notez simplement que nous démarrons Consul en mode `serveur`. (Ceci est à la ligne 8 dans le fichier de configuration.)

Essayez de recharger l'interface utilisateur après le démarrage de chaque serveur.

Notre script de démarrage est simple et exécute Consul en arrière-plan. En production, cela serait démonisé ou géré par un orchestrateur.

    Une fois que vous avez un cluster sain, l'interface utilisateur Consul sera disponible. Cliquez sur l'onglet Nodes dans l'interface utilisateur Consul pour voir vos trois serveurs. Le leader est marqué d'une étoile.⭐
  tabs:
  - title: Consul0
    type: terminal
    hostname: consul-server-0
  - title: Consul1
    type: terminal
    hostname: consul-server-1
  - title: Consul2
    type: terminal
    hostname: consul-server-2
  - title: Server0 - Config
    type: code
    hostname: consul-server-0
    path: /consul/config/server.json
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  difficulty: basic
  timelimit: 600
- slug: 02-consul-cli
  id: ur5wsyiizlac
  type: challenge
  title: Consul CLI
  teaser: Take the Consul CLI for a spin
  notes:
  - type: text
    contents: |-
      Consul est distribué sous la forme d'un fichier binaire unique, ce qui signifie qu'il peut agir à la fois comme serveur ou comme client en ligne de commande..
      Vous pouvez en savoir plus sur la liste complète des commandes [here](https://www.consul.io/docs/commands/index.html).
  assignment: |-
Le binaire Consul peut agir comme un serveur, un client ou un outil de ligne de commande. Nous avons préconfiguré les paramètres de ligne de commande pour vous avec la variable d'environnement `CONSUL_HTTP_ADDR`.

     Vous pouvez exécuter la commande suivante pour voir cette valeur : `echo $CONSUL_HTTP_ADDR`. Il s'agit du point de terminaison du serveur d'API pour Consul. L'outil de ligne de commande Consul communique avec l'API sur 127.0.0.1 ou localhost.

     Toutes les interactions avec Consul, que ce soit via l'interface graphique ou la ligne de commande, ont toujours un appel d'API sous-jacent.

     Essayez ces commandes et affichez les résultats. Vous pouvez exécuter les commandes sur n'importe quel serveur : <br>
    * Get Help:
      - `consul help` or `consul subcommand -help`
    * View Logs:
      - `consul monitor` (CTRL-C to escape)
    * List Members:
      - `consul members`
    * List Peers:
      - `consul operator raft list-peers`
    * Agent Info:
      - `consul info` <br>

    Vous pouvez consulter les mêmes informations dans l'interface utilisateur Consul.
  tabs:
  - title: Consul0
    type: terminal
    hostname: consul-server-0
  - title: Consul1
    type: terminal
    hostname: consul-server-1
  - title: Consul2
    type: terminal
    hostname: consul-server-2
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  difficulty: basic
  timelimit: 600
- slug: 03-consul-api
  id: 6mh7z4axuiix
  type: challenge
  title: Consul API
  teaser: Use the Consul API
  notes:
  - type: text
    contents: |-
      Consul dispose d'une API RESTful que vous pouvez utiliser pour interagir avec Consul.
     Vous pouvez voir la documentation de l'API Consul [here](https://www.consul.io/api/index.html).

  Essayons quelques-unes des mêmes commandes de notre dernière mission avec l'API. Nous utiliserons la commande Unix `curl` pour interagir avec l'API. Copiez et collez chaque commande dans le terminal et affichez la sortie.

    * Logs:
      - `curl -s http://127.0.0.1:8500/v1/agent/monitor` (CTRL-C to escape)
    * List Members:
      - `curl -s http://127.0.0.1:8500/v1/agent/members | jq`
    * Get Consul Leader:
      - `curl -s http://127.0.0.1:8500/v1/status/leader | jq`
    * Agent Info:
      - `curl -s http://127.0.0.1:8500/v1/agent/self | jq` <br>
  tabs:
  - title: Consul0
    type: terminal
    hostname: consul-server-0
  - title: Consul1
    type: terminal
    hostname: consul-server-1
  - title: Consul2
    type: terminal
    hostname: consul-server-2
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  difficulty: basic
  timelimit: 600
- slug: 04-consul-agents
  id: unxdsxuwburk
  type: challenge
  title: Ajouter un agent
  teaser: Ajoutez un agent client Consul à votre cluster Consul.
  notes:
  - type: text
    contents: |-
 L'agent Consul s'exécute sur chaque nœud où vous souhaitez suivre les services. Un nœud peut être un serveur physique, une machine virtuelle ou un conteneur.

       L'agent suit les informations sur le nœud et ses services associés. Les agents rapportent ces informations aux serveurs Consul, où nous avons une vue centrale de l'état des nœuds et des services.
   affectation : |-
     Nous avons ajouté un `App Server` à votre environnement de laboratoire. Le serveur d'applications est configuré pour s'exécuter en mode "client".

     Regardez dans l'onglet "Configuration de l'application". Notez que l'indicateur *server* est défini sur false.

     Exécutez le script de démarrage Consul dans l'onglet "App" et joignez cet agent au cluster.

    ```
    /bin/start_consul.sh
    ```

Consultez la liste des nœuds dans l'interface utilisateur Consul ou exécutez la commande "consul members" pour vérifier que le serveur d'applications a rejoint le cluster.
  tabs:
  - title: App
    type: terminal
    hostname: consul-agent-0
  - title: App - Config
    type: code
    hostname: consul-agent-0
    path: /consul/config/client.json
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  difficulty: basic
  timelimit: 600
- slug: 05-consul-ha
  id: twklmkkkdxlb
  type: challenge
  title: Consul High Availability
  teaser: Test Consul's High Availability Capabilities
  notes:
  - type: text
    contents: |-
      Les serveurs Consul travaillent ensemble pour élire un leader unique, qui devient la principale source de vérité pour le cluster. Toutes les mises à jour sont transmises au responsable du cluster. Si le leader tombe en panne, l'un des autres serveurs peut immédiatement prendre sa place.

Pour garantir une haute disponibilité au sein du système, nous recommandons de déployer Consul avec 3 ou 5 nœuds de serveur.  - type: text
    contents: |-
Le quorum requiert au moins (n+1)/2 membres. Vous avez besoin d'un quorum pour un cluster sain. <br>

      Un cluster à trois nœuds peut tolérer la perte d'un seul membre.
      Un cluster à cinq nœuds peut tolérer la perte de deux membres et continuer à fonctionner.
  affectation : |-
    Nous avons 3 serveurs dans notre environnement de lab. Cela signifie que nous pouvons en perdre un
    serveur et avoir toujours un cluster sain. Vous pouvez en savoir plus sur le Consensus
    Protocole [ici](https://www.consul.io/docs/internals/consensus.html). <br>

    Désactivons le leader et observons ce qui se passe. <br>

    Tout d'abord, trouvez votre leader actuel.
    Vous pouvez le faire à partir de l'interface utilisateur (recherchez l'étoile) ou sur la ligne de commande : <br>

    ```
    consul operator raft list-peers

    ```

    Accédez à l'onglet de votre chef actuel et exécutez la commande suivante pour arrêter l'agent Consul : <br>

    ```
    pkill consul
    ```

    Si votre chef est `Consul0`, vous perdrez temporairement l'accès à l'interface utilisateur. <br>

    Répétez le processus ci-dessus sur l'onglet du terminal du serveur principal et tuez le nouveau chef. <br>

    Exécutez les commandes suivantes sur le dernier serveur : <br>

    ```
    consul members
    consul operator raft list-peers
    consul catalog nodes

    ```

    Des messages d'erreur comme celui-ci s'afficheront : `Unexpected response code: 500 (No cluster leader)` <br>

    Maintenant que deux serveurs sont tombés en panne, votre cluster n'est plus fonctionnel,
    toutes les commandes API entraîneront des erreurs jusqu'à ce qu'au moins un de vos autres serveurs revienne en ligne.
    Récupérons en redémarrant Consul. Exécutez la commande suivante sur l'un des nœuds défaillants : <br>

    ```
    /bin/start_consul.sh
    ```

    Maintenant tapez : `consul members`pour vérifier que l'API Consul répond à nouveau. <br>

Ramenez votre troisième serveur avec le script de démarrage: <br>

    ```
    /bin/start_consul.sh
    ```

    Et run `consul members`une dernière fois. Vous devriez voir les trois nœuds de serveur en état actif.. <br>

    Bravo !, votre cluster Consul est à nouveau sain..
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Consul0
    type: terminal
    hostname: consul-server-0
  - title: Consul1
    type: terminal
    hostname: consul-server-1
  - title: Consul2
    type: terminal
    hostname: consul-server-2
  - title: App
    type: terminal
    hostname: consul-agent-0
  difficulty: basic
  timelimit: 600
- slug: 06-consul-acls
  id: qlfdatwayytc
  type: challenge
  title: Consul ACLs
  teaser: Set up basic Consul ACLs
  notes:
  - type: text
    contents: |-
Consul utilise des listes de contrôle d'accès (ACL) pour sécuriser l'interface utilisateur, l'API, la CLI, les communications de service et les communications d'agent.
       Les ACL fonctionnent en regroupant les règles dans des stratégies, puis en associant une ou plusieurs stratégies à un jeton.
       Les ACL sont impératives pour tous les environnements de production Consul. <br>

       Pour une explication détaillée du système ACL, consultez ce [guide](https://learn.hashicorp.com/consul/security-networking/production-acls). <br>
     Ce défi prendra 1-2 minutes pour tourner. Veuillez patienter.
  assignment: |-
 Appliquons quelques contrôles d'accès à notre cluster Consul pour empêcher tout accès non autorisé. Dans ce défi, vous utiliserez le jeton d'amorçage principal pour accéder à l'interface utilisateur et pour activer une stratégie pour votre serveur d'applications.

     Vous remarquerez peut-être que vous n'êtes pas autorisé à accéder à l'interface utilisateur. Aucun des nœuds et des services ne s'affiche en raison d'une politique de *deny* par défaut.

    Les ACL Consul sont activées en exécutant la commande `consul acl bootstrap`.

   Nous avons déjà exécuté cette commande pour vous et enregistré la sortie dans le `ACL Bootstrap` code editor tab. Le jeton d'amorçage initial est le champ "SecretID" de cette sortie. Ce jeton spécial est utilisé pour configurer votre cluster et générer d'autres jetons. Copiez le jeton d'amorçage en le mettant en surbrillance et en appuyant sur CTRL-C. <br>

Pour réactiver l'interface utilisateur, sélectionnez l'onglet Consul UI, cliquez sur l'onglet ACL et saisissez votre jeton dans le champ de texte.

     Sur la ligne de commande, vous devez définir une variable d'environnement avec votre jeton. Exécutez la commande suivante dans l'onglet "Application ».

    ```
    export CONSUL_HTTP_TOKEN=<your_token_here>
    ```

   Cet atelier a une règle de refus par défaut, de sorte que votre nœud "App" consignera les erreurs ACL. Exécutez la commande suivante pour afficher les erreurs ACL (CTRL-C pour quitter) :

    ```
    consul monitor
    ```

    ```
    2019/09/18 20:42:06 [WARN] agent: Coordinate update blocked by ACLs
    ```

Le serveur d'application est actuellement bloqué pour effectuer des mises à jour ou des requêtes consulaires.

Créons une stratégie pour permettre un accès limité à notre nœud d'application. Exécutez ces commandes à partir de l'onglet "App".

    ```
    consul acl policy create \
     -name app \
     -rules @/consul/policies/app.hcl
    ```

Ensuite, créez un token pour cette stratégie.
    ```
    consul acl token create -description "app agent token" \
      -policy-name app
    ```

Enfin, appliquez le token pour le rendre actif.
    ```
    consul acl set-agent-token agent "<your_app_agent_token>"
    ```

  Vous pouvez maintenant vérifier que les journaux de l'agent "App" n'enregistrent plus d'erreurs.
     Bon travail!!! Vous venez d'obtenir votre premier agent Consul !  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: App
    type: terminal
    hostname: consul-agent-0
  - title: App Node Policy
    type: code
    hostname: consul-server-2
    path: /consul/policies/app.hcl
  - title: ACL Bootstrap
    type: code
    hostname: consul-server-2
    path: /tmp/bootstrap.txt
  difficulty: basic
  timelimit: 600
checksum: "4620626064868703026"

