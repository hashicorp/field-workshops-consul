slug: service-discovery-with-consul
id: nyzxxfyzce4a
type: track
title: Service Discovery with Consul
teaser: Tired of manually updating IP addresses in config files? Is your network CMDB
  or spreadsheet woefully out of date? Learn how Consul can automatically keep your
  service catalog up to date and current.
description: |
  Join us on an adventure of service discovery. In this track you'll learn how to connect a web application with its database using Consul. Topics covered include service registration, health checks, service discovery, automated config management, and seamless DNS integration.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags:
- service discovery
- health checks
- dns
- service registry
- service catalog
- consul
owner: hashicorp
developers:
- lance@hashicorp.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: 01-the-website-is-down
  id: lxxrrq17fcxz
  type: challenge
  title: "The website is DOWN! \U0001F631"
  teaser: |
    The company website is down and it's up to you to fix it. Use your Consul superpowers to find the database server and reconnect it to the app.
  assignment: |
    The website is DOWN! Your application server is not working correctly. You've determined that the app can't connect to the database.

    Click on the *Nodes* tab in the Consul UI to find the database server's IP address.

    Edit the `wp-config.php` file in the *App Config* tab. On line 32 you'll find the configuration for the database server. Update the IP address in the file and save it with *CTRL-S*.

    Verify that the application is loading in the *Website* tab. You may need to hit the refresh button for the site to load.
  notes:
  - type: text
    contents: |
      Consul has a complete and up-to-date map of all the hosts in your network.

      Gone are the days of cumbersome, error-prone spreadsheets and Configuration Management Database (CMDB) systems.

      The current IP address of each host is easy to find in the Consul UI.

      Visit the *Nodes* tab of the Consul UI to see the IP addresses of all your machines.
  - type: text
    contents: "\U0001F441️ Next Stop...the Consul Zone \U0001F570️"
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    path: /ui/dc1/nodes/Database
    port: 8500
  - title: App Config
    type: code
    hostname: app
    path: /var/www/html/wp-config.php
  - title: Website
    type: service
    hostname: app
    port: 80
  difficulty: basic
  timelimit: 900
- slug: 02-register-service-check-db
  id: qy8zgg6pz8mv
  type: challenge
  title: Register a Service Check for the Database ✔️
  teaser: In this challenge you'll attach a health check to the database service so
    we can monitor its status.
  assignment: |
    In this challenge you'll create a service check that will register the database service in Consul's catalog. You'll need to copy a service definition file into the Consul config directory to activate the service.

    Click on the database server tab and use the `cat` command to have a look inside the service definition file:
    ```
    cat /database_service.json
    ```

    The config file contains a service check named mysql with a health check that monitors port 3306. If the database ever goes down Consul can immediately mark it as unhealthy. Consul can automatically route traffic to healthy nodes.

    Next copy the file into the Consul config directory:
    ```
    cp /database_service.json /consul/config/database_service.json
    ```

    Then go ahead and reload the Consul service:

    ```
    consul reload
    ```

    Look at the services tab in the Consul UI. You should now see a service name and health check for your database.

    To find the health check in the UI click on *Services* and then *mysql*.

    NOTE: It may take a moment for the health check to show up as healthy.
  notes:
  - type: text
    contents: |-
      Now that you've got the website back up and running, it's time to put a health check on that database service. <br>

      Application health checks are easy to build and can check a wide array of conditions.
      Once you have this rich data it is easy to build automation around it. <br>

      In this challenge you'll configure a service health check on the database server,
      so that you'll always know where the database service is, and whether it is healthy.
  - type: video
    url: https://www.youtube.com/embed/CIv65T172mU?modestbranding=1&rel=0
  - type: text
    contents: "✔️ Check Yourself Before you Wreck Yourself \U0001F468‍\U0001F4BB"
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Database Server
    type: terminal
    hostname: database
  difficulty: basic
  timelimit: 900
- slug: 03-register-service-check-app
  id: rxiqqury4hcw
  type: challenge
  title: Register a Service Check for the Application ✔️
  teaser: In this challenge you'll attach a health check to the application so we
    can monitor its status.
  assignment: |
    Just like in the previous challenge, you'll need to copy a service definition file and reload Consul.

    Click on the application server tab and use the `cat` command to have a look inside the service definition file:
    ```
    cat /app_service.json
    ```

    The config file contains a service check named http with a health check that monitors port 80. If the app ever goes down Consul can immediately mark it as unhealthy. Consul can automatically route traffic to healthy nodes.

    Next copy the file into the Consul config directory:
    ```
    cp /app_service.json /consul/config/app_service.json
    ```

    Then go ahead and reload the Consul service:

    ```
    consul reload
    ```

    Look at the services tab in the Consul UI. You should now see a service name and health check for your application.

    To find the health check in the UI click on *Services* and then *http*.

    NOTE: It may take a moment for the health check to show up as healthy.
  notes:
  - type: text
    contents: You can use Consul to monitor all kinds of services. In this challenge
      you'll add a service check to your application.
  tabs:
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: Application Server
    type: terminal
    hostname: app
  difficulty: basic
  timelimit: 900
- slug: 04-automate-your-job
  id: m99lb94yn3ac
  type: challenge
  title: "Automate Your Job with Consul Template\U0001F916"
  teaser: Now that you have the website back up and running, it's time to automate
    this so you don't get woken up at 2 am again.
  assignment: |
    In this challenge you'll use consul-template to ensure that the application config always has the correct IP address. Run the following command on the *App Server* terminal tab to query the Consul service catalog for your database server:

    ```
    dig @localhost -p 8600 mysql.service.consul
    ```

    In the output you'll see a line called `ANSWER SECTION`. Right below it is the current IP address of your database server. Consul template can automatically insert this IP address into your application config file.

    Click on the *Consul Template* tab and look inside the file. Consul template can update your `wp-config.php` file whenever the database IP address changes. Notice the template configuration for DB_HOST on line 32 of the file. This part is automatically replaced with the address of your healthy database server.

    Run the following commands on in the *App Server* terminal to activate Consul Template.
    You will run Consul Template in `once` mode for this example. In production this is typically a daemon. <br>

    ```
    cd /var/www/html
    consul-template -once -log-level debug -template "wp-config.php.tpl:wp-config.php"
    ```

    Reload the `wp-config.php` file in your *App Config* tab to see the updated IP address.

    Open the *Website* tab and verify that the web app is loading correctly.

    Consul Template will continuously watch for changes and update your configuration files automatically.
  notes:
  - type: text
    contents: |
      The database and application are both registered in the Consul catalog. The health status and IP addresses of each service are always up to date, and can be queried at any time.

      In the next challenge you'll automate the configuration of your wp-config.php file using Consul Template.

      Consul Template is a small agent that can manage files and populate them with data from the Consul catalog.
  - type: text
    contents: "\U0001F5A7 All Your Service Are Belong To Us \U0001F469‍\U0001F4BB"
  tabs:
  - title: Website
    type: service
    hostname: app
    port: 80
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: App Config
    type: code
    hostname: app
    path: /var/www/html/wp-config.php
  - title: Consul Template
    type: code
    hostname: app
    path: /var/www/html/wp-config.php.tpl
  - title: App Server
    type: terminal
    hostname: app
  difficulty: basic
  timelimit: 900
- slug: 05-seamless-service-discovery
  id: icwdlsw0pseb
  type: challenge
  title: "Seamless Service Discovery with Consul DNS \U0001F5A7"
  teaser: Consul can provide seamless access to all nodes and services in the catalog,
    without rewriting your apps.
  assignment: |-
    In this exercise you'll configure Consul to act as a local DNS server,
    providing seamless access to your service catalog via simple DNS hostnames. The
    Linux dnsmasq service is running on your application server. <br>

    Run the following command to see the dnsmasq configuration: <br>

    ```
    cat /etc/dnsmasq.d/consul
    ```

    The server config lines say _Direct all traffic for .consul queries to Consul on local port 8600, everything else to our normal DNS server_. <br>

    Now look at the `/etc/resolv.conf` file.
    This is the file that controls where DNS queries are routed. <br>

    ```
    cat /etc/resolv.conf
    ```

    We are now routing all DNS queries through our local system, but only *.consul queries are handled by Consul.
    All other DNS traffic is passed upstream to the corporate DNS server.
    Try it yourself with the `dig` command: <br>

    ```
    dig mysql.service.consul
    ```

    Edit line 32 of the `wp-config.php` file again, but this time instead of using an IP address
    use the Consul DNS name for your database server node: <br>

    ```
    mysql.service.consul
    ```

    Visit the Website tab and verify that the app has connected to the database using Consul DNS.
  notes:
  - type: text
    contents: |
      The Consul catalog can seamlessly integrate with your current application infrastructure without changing any of your code.
      Imagine giving all your applications and services easy access to configuration data, health checks, and network info. <br>

      This is the magic of Consul DNS integration. With this configuration any application that speaks DNS can take advantage of the powerful Consul service catalog.
      In the next challenge we'll use dnsmasq to route all local queries for *.consul addresses to the Consul service. Our application will now be able to use a simple Consul-managed DNS name for connecting to the database.
  - type: text
    contents: |-
      There are several different ways to integrate Consul into your system DNS. <br>
      Check out the HashiCorp Learn guide to learn more about DNS forwarding: https://learn.hashicorp.com/consul/security-networking/forwarding
  - type: text
    contents: "\U0001F310 Consul - A Powerful DNS-based Service Catalog \U0001F578️"
  tabs:
  - title: Website
    type: service
    hostname: app
    port: 80
  - title: Consul UI
    type: service
    hostname: consul-server-0
    port: 8500
  - title: App Config
    type: code
    hostname: app
    path: /var/www/html/wp-config.php
  - title: App Server
    type: terminal
    hostname: app
  difficulty: basic
  timelimit: 900
checksum: "4627028940176809867"
