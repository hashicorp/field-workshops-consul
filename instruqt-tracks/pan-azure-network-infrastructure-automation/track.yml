slug: pan-azure-network-infrastructure-automation

version: 0.0.1
type: track
title: Palo Alto Firewall Network Infrastructure Automation with Consul-Terraform-Sync Workshop
teaser: Palo Alto Networks Next Generation Firewalls and Consul-Terraform-Sync Workshop
description: In this workshop you'll learn how to automate the provisioning and management
  of traditional network infrastructure using Terraform, Vault Consul, and Consul Terraform
  Sync. Eliminate exposure to operational overhead and security risk while accelerating
  the deployment and scaling of applications and services.
icon: https://raw.githubusercontent.com/hashicorp/field-workshops-consul/pan-azure-nia/instruqt-tracks/network-infrastructure-automation/assets/images/mainimage.png
tags:
- consul
- NIA
- cts
- terraform
owner: hashicorp
developers:
- sebastian.maniak@hashicorp.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: 1-review-lab-objectives

  type: challenge
  title: Workshop Overview
  teaser: Before we begin, lets quickly review the architecture and understand what we are trying to accomplish.
  notes:
  - type: text
    contents: |-
      Every journey begins with a single step!

      Setting up your environment... Your Azure account will be ready in ~5 minutes.

      Objective: Review the environment you will build in Azure using Terraform, and manage using Consul Terraform Sync.
  assignment: |
    "In this workshop, we will build the infrastructure depicted in the 'NIA - Traffic Flow' tab on the left, but before we do, let's quickly review the operational challenges we are going to address.

    ## Navigate to the "NetOps - Operational Pattern" tab.

    In this diagram we have a two-tier application running on virtual machines that use Consul for Service Discovery. New virtual machines are frequently added and removed to handle scaling requirements. The overworked NetOps and SecOps teams have to frequently reconfigure the load balancers and firewalls.

    The long hours and lengthy job queues result in deployment errors and, potentially security issues.

    ## Navigate to the "NIA - Operational Pattern" tab.

    `Consul` monitors application state changes in real-time (IP Addresses and App meta-data). `Consul Terraform Sync` uses this information to automatically configure the various network infrastructure, eliminating the need for NetOps teams to be involved after the initial configuration.

    ## Navigate to the "NIA - Traffic Flow" tab.

    In this diagram you can see the Traffic Flow of the infrastructure we are going to build in this workshop.

    NOTE: Consul Terraform Sync automates the management of policy address groups on the Palo Alto Firewalls. This facilitates having fine-grained policies without increasing operational overhead.

    In the next few challenges we are going to build this cloud environment, enabling you to see this workflow in operation."
  tabs:
  - title: NetOps - Operational Pattern
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/1.NIA-Workshop-NetOps.html
  - title: NIA - Operational Pattern
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/1.NIA-Workshop-CTS.html
  - title: NIA - Traffic Flow
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/1.NIA-Workshop-NetOps_Traffic.html
  difficulty: basic
  timelimit: 300
- slug: 2-deploy-infrastructure

  type: challenge
  title: Day 0-Deploy the Infrastructure
  teaser: 
  notes:
  - type: text
    contents: |
      Setting up your environment... Your Azure account will be ready in ~5 minutes.
      Keep an eye on the bottom right corner to know when you can get started.
  assignment: |-
    In this assignment you will start by installing Terraform

    In the `Shell` tab, execute the following command to install Terraform:

    ```
    apt-get install terraform
    ``` 
    
    The "Terraform Code" tab contains all of the Infrastructure as Code (IaC) templates used by Terraform to build the Infrastructure. Feel free to look over the code!
    
    In the `Shell` tab, deploy the Azure Infrastructure by running the following commands:

    ```
    terraform init
    terraform plan
    terraform apply -auto-approve

    ```

    Note: You will be promted to add your own email and a specific name you want of your azure resource group

    The following will be deployed: 
  
    * Azure VNets/Subnets/Routing
    * Palo Alto Firewall in it's own VNET
    * Vault - Secrets Management
    * Consul - Service Registry and Discovery (Source of truth)
    * Bastion Server
    * Logging Server

    This is part of our Day 0 deployment in an Infrastructure as Code World.

    NOTE: Palo Alto takes about 6+ mins to deploy in azure

  tabs:
  - title: Current Lab Setup
    type: website
    url: https://raw.githubusercontent.com/hashicorp/field-workshops-consul/pan-azure-nia/instruqt-tracks/network-infrastructure-automation/assets/images/mainimage.png
  - title: Terraform Code
    type: code
    hostname: workstation
    path: /root/terraform/01-deploy-infra
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Cloud Consoles
    type: service
    hostname: workstation
    path: /
    port: 80
  difficulty: basic
  timelimit: 600
- slug: 3-configure-infra

  type: challenge
  title: Configure the Network Infrastructure
  teaser: Configure the Palo Alto Firewall with appropriate IPs, NATs, Security Policies, Rules..etc
  notes:
  - type: text
    contents: |
      Terraform allows you to document, share, and deploy environments in one workflow by using Infrastructure as Code!

      The following challange will configure Palo Alto security policies.
  assignment: |
    Next objective is to configure the Palo Alto Firewall and HashiCorp Vault

    In the `Shell` tab, configure the PAN OS by running the following commands:

    ```
    terraform init
    terraform plan
    terraform apply -auto-approve
    ```

    When Terraform finishes the output will provide links to access the following: 
    1. Vault - Store the PAN username and Password
    2. Palo Alto Management IP
    3. Consul MGMT IP

    Next Explore Vault: Explore Vault and Retrieve PAN Password
    1. Log into your VAULT server using "root" token
    2. Under Secrets Select "net_infra" 
    3. In the net_infra secrets engine select "paloalto"
    4. This will provide you Palo Alot username and password

    Next Explore Pan and Commit changes:
    1. Log into the Palo Alto Management IP using the credenitals from your VAULT server
    2. Once, your logged in (note.. you might need to dismiss some popups)
    3. Click on the "COMMIT" button in the top right corner.. this will show you the changes deployed using Terraform
    4. Click on Commit 

    Note: You have 2 options with Terraform and PAN.. you can automatically push configs using a commit script made by Palo Alto or you can use the method we just did. 

    Explore the Palo Alto:
    You will notice that we built many security policies and create 4 dynamic address groups:
    * cts-addr-grp-api
    * cts-addr-grp-logging
    * cts-addr-grp-web
    * cts-addr-grp-db

    Note: There are no IP address in these dynamic address groups, they will be populated once we deploy our network infrastructure automation service.

    Each of these Dynamic Address groups belogs to a security policy that is being managed by our security team using Terraform with an Infrastrucure as Code framework.

  tabs:
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/3.NIA-Workshop-Core_Svcs.html
  - title: Core Infra Terraform Code
    type: code
    hostname: workstation
    path: /root/terraform/02-configure-infra
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Cloud Consoles
    type: service
    hostname: workstation
    path: /
    port: 80
  difficulty: basic
  timelimit: 3000
- slug: 4-deploy-apps-services

  type: challenge
  title: Deploy our applications and services
  teaser: Next we will deploy the following services web, api and db.
  notes:
  - type: text
    contents: |
      With the Network Infrastructure Ready, its time to deploy our apps, api, and databases.

      Let's go and deploy our apps!
  assignment: |
    In the `Shell` tab, deploy our services by running the following commands:

    ```
    terraform init
    terraform plan
    terraform apply -auto-approve
    ```

    The following terraform code will deploy the following:
    * WEB Servers
    * API Servers
    * DB Servers

    All of the services/apps will be registerd with Consul. Consul will be our source of truth, our service registry that shows what is online and offline.

    Log into the Consul server and verify that you have nodes and services online. Once all services are green try to access the web site that deployed to ensure everything is working.

    **Next** 

    Now that we have our entire infrastrucute online, let's eleavate this and deploy idenrity based workflow/automation using Consul Terraform Sync.

  tabs:
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/4.NIA-Workshop-F5_PA.html
  - title: App Terraform Code
    type: code
    hostname: workstation
    path: /root/terraform/03-deploy-apps
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Cloud Consoles
    type: service
    hostname: workstation
    path: /
    port: 80
  difficulty: basic
  timelimit: 3000
- slug: 5-network-automation

  type: challenge
  title: Deploy Consul Terraform Sync
  teaser: Elevate your automation with Identity based workflows.
  notes:
  - type: text
    contents: Now we elevate your network infrastructure automation by deploying Consul Terraform Sync to focus on Day 2 network operations.
  assignment: |-
    Let's deploy Consul-Terraform-Sync service 
    
    In the `Shell` tab, deploy CTS by running the following commands:

    ```
    terraform init
    terraform plan
    terraform apply -auto-approve
    ```

    Log into your Consul server to validate that Consul-Terraform-Sync was registered with cosnul

    Next..let's see if the magic worked... Log into the Palo Alto Firewall and take a look in the "Objects" tab and click on "Address Group". Select any address group and click on the "more.." button. 
    What do you see?

    You will notice that Consul-Terraform-Sync has automatically add the IPs of the nodes that are registered in Consul.

    
  tabs:
  - title: Provision CTS
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/4.NIA-Workshop-F5_PA.html
  - title: Terraform Code
    type: code
    hostname: workstation
    path: /root/terraform/04-network-automation
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Cloud Consoles
    type: service
    hostname: workstation
    path: /
    port: 80
  difficulty: basic
  timelimit: 300
- slug: 6-scale-the-application

  type: challenge
  title: Day 2 ops scale the app
  teaser: Let's see the CTS magic in action
  notes:
  - type: text
    contents: |
      Let's perform some day 2 operations.
  assignment: |
    Let's scale our apps to ensure  
    
    In the `Shell` tab, deploy CTS by running the following commands:

    ```
    terraform apply -var app_count=3 -var web_count=3 -auto-approve
    ```

    After the Terraform run completes, you can monitor the status of your nodes and services using the Consul UI. Once all of the new instances are online and healthy, you can revisit some of the things we reviewed in the previous exercises.

    This concludes the final step in the Network Infrastructure Automation workshop.

  tabs:
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/master/instruqt-tracks/network-infrastructure-automation/assets/images/6.NIA-Workshop-Tokens.html
  - title: Shell
    type: terminal
    hostname: workstation
 - title: Terraform Code
    type: code
    hostname: workstation
    path: /root/terraform/03-deploy-apps
  - title: Consul
    type: service
    hostname: workstation
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: workstation
    path: /
    port: 8200
  - title: Cloud Consoles
    type: service
    hostname: workstation
    path: /
    port: 80
  difficulty: basic
  timelimit: 1000
checksum: "14590901449097205310"
